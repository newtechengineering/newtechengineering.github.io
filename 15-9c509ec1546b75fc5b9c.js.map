{"version":3,"sources":["webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/@firebase/logger/dist/index.esm.js","webpack:///./node_modules/firebase/database/dist/index.esm.js"],"names":["process","Object","defineProperty","exports","value","ex","id","firebase","__webpack_require__","tslib_1","util","logger$1","DOMStorageWrapper","domStorage_","this","prefix_","prototype","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","var_args","_i","arguments","length","message","i","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","concat","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","forEach","val","doubleToIEEE754String","v","s","f","ln","bits","Infinity","Math","abs","pow","min","floor","LN2","round","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","beingCrawled","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","path","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","location","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","_a","segment","kv","decodeQuery","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","clone","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","call","defineProperties","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","json","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","getCount","otherKey","getAnyKey","thisKey","every","cb","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","removeEventCallbackForQuery","once","userCallback","cancelOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","item","clear","SparseSnapshotTree","find","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","children","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","getValues","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","view","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","findValue","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","write","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","findKey","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","getToken","forceRefresh","then","Promise","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","document","addEventListener","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","readyState","called_1","wrappedFn_1","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","User-Agent","SDK_VERSION","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","p","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","Repo","forceRestClient","app","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","values","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","delete","__awaiter","__generator","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","registerService","unused","module","__webpack_exports__","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","TypeError","debug","level","inst"],"mappings":"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","file":"15-9c509ec1546b75fc5b9c.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar firebase = _interopDefault(require('@firebase/app'));\nvar tslib_1 = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger$1.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger$1.LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                _this.log_(error);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error) {\r\n                self_1.log_('Failed to get token: ' + error);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\r\n            var data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error = new Error(message);\r\n                    error.code = code;\r\n                    callback(error);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error, committed, snapshot) {\r\n            if (error) {\r\n                deferred.reject(error);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n","import '@firebase/database';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n"],"sourceRoot":""}